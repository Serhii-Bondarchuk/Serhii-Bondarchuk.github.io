{"version":3,"sources":["components/MyContext.js","components/Container.js","components/Trash.js","components/Post.js","App.js","reportWebVitals.js","index.js"],"names":["MyContext","createContext","CHANGE","change","isToggleOn","type","payload","initialState","store","createStore","state","action","composeWithDevTools","applyMiddleware","console","log","connect","value","dispatch","props","useContext","onClick","Trash","val","_currentValue","Post","Consumer","Button","HelloButton","alert","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAEaA,EAAYC,wBAAc,K,OCUjCC,EAAS,SAETC,EAAS,SAACC,GACb,MAAO,CACJC,KAAOH,EACPI,QAASF,IAITG,EAAe,CAChBH,YAAa,GA2BLI,EAAQC,uBAjBP,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAG7C,OAAOA,EAAON,MACZ,KAAKH,EACL,OAAO,2BAAIQ,GAAX,IAAkBN,WAAYO,EAAOL,UAMtC,QAAS,OAAOI,KAMsBE,8BACxCC,8BAKFC,QAAQC,MAkER,IAaeC,eAbS,SAACN,GAEtB,MAAO,CACJO,MAAOP,MAIc,SAACQ,GACzB,MAAO,CACJf,OAAS,SAACC,GAAiBc,EAASf,EAAOC,QAIlCY,EA7Ef,SAAmBG,GA6BjBL,QAAQC,IAAI,QAASI,GAGtB,IAAMF,EAAQG,qBAAWpB,GAWtB,OARJc,QAAQC,IAAI,QAASE,GAWf,iCACA,mBAAGI,QAAWJ,EAAd,4BACA,yBAAQI,QAtCO,WAWdF,EAAMF,MAAMb,YAAce,EAAMF,MAAMb,WAIzCI,EAAMU,SAASf,EAAOgB,EAAMF,MAAMb,cAuBhC,UAEE,sCACEe,EAAMF,MAAMb,WAAa,KAAO,SAIjC,6BAAKe,EAAMF,MAAMb,WAAa,kFAAmB,gGC1FpDG,EAAe,GAqBRC,EAAQC,uBAXL,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAMjC,OALNA,EAAON,KAKMK,IAKkBE,8BACxCC,8BA8BaS,MAtBf,WAOG,IAAMC,EAAMH,qBAAWpB,GAItB,OAFDc,QAAQC,IAAIQ,GAGT,8BACE,sBAAMF,QAASE,EAAf,qDC9DFA,EAAMvB,EAAUwB,cAaPC,MAXf,WAIC,OAHDX,QAAQC,IAAIQ,GAIF,cAACvB,EAAU0B,SAAX,UACC,kBAAM,qCAAQH,EAAR,YCuBjB,SAASI,EAAOR,GACd,OAAO,wBAAQE,QAASF,EAAME,QAAvB,uBAGT,SAASO,IAIP,OAAO,cAACD,EAAD,CAAQN,QAHf,WACEQ,MAAM,aAwCKC,MA7Bf,WAGE,OACK,cAAC9B,EAAU+B,SAAX,CAAoBd,MAAS,IAA7B,SACD,eAAC,WAAD,WACD,iCAAM,yCAAN,aAEC,uBAGA,cAAC,EAAD,IAEC,uBAEA,cAAC,EAAD,IAED,uBACC,cAAC,EAAD,IAEA,cAACW,EAAD,UC3DQI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEA,cAAC,IAAD,CAAUnC,MAASA,EAAnB,SACE,cAAC,EAAD,QAIFoC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3ee76584.chunk.js","sourcesContent":["import React, {createContext} from 'react'\r\n\r\nexport const MyContext = createContext(5000);  "," import React, {useState, useContext } from 'react';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {connect} from 'react-redux'\r\nimport {MyContext} from './MyContext'\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst CHANGE = 'CHANGE';\r\n\r\nconst change = (isToggleOn) => {\r\n   return {\r\n      type : CHANGE, \r\n      payload: isToggleOn\r\n   }\r\n}\r\n\r\nconst initialState = {\r\n     isToggleOn : true\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet reducer = (state = initialState, action) => {\r\n    \r\n\r\n   switch(action.type){\r\n     case CHANGE:\r\n     return {...state, isToggleOn: action.payload\r\n\r\n\r\n       }\r\n\r\n\r\n    default: return state\r\n   }\r\n\r\n}\r\n\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(\r\n  applyMiddleware(),\r\n  // other store enhancers if any\r\n));\r\n\r\n\r\nconsole.log()\r\n\r\nfunction Container(props) {\r\n  \r\n   // let [isToggleOn, setTogle] =\r\n       // useState(true); \r\n   \r\n    // let state = {isToggleOn: true};\r\n\r\n    // This binding is necessary to make `this` work in the callback\r\n   \r\n\r\n const handleClick = () => {\r\n   \r\n  \r\n        // !props.value.isToggleOn\r\n        // ? props.value.isToggleOn = true\r\n        // : props.value.isToggleOn = false\r\n\r\n    //  if (!props.value.isToggleOn){\r\n    // console.log(props.value.isToggleOn = true)\r\n    // } else {props.value.isToggleOn = false}\r\n\r\n       props.value.isToggleOn = !props.value.isToggleOn\r\n\r\n\r\n\r\n    store.dispatch(change(props.value.isToggleOn))\r\n          \r\n  }\r\n\r\n  console.log('props', props)\r\n\r\n   \r\n const value = useContext(MyContext);\r\n\r\n\r\nconsole.log('value' ,value)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      \r\n      <span>\r\n      <p onClick = {value}> For Function </p>\r\n      <button onClick={handleClick}>\r\n       \r\n        <h2>sfrf</h2>\r\n        { props.value.isToggleOn ? 'ON' : 'OFF'}\r\n\r\n      </button>\r\n\r\n         <h3>{props.value.isToggleOn ? 'Линия включена' : 'Линия Отключена'}</h3>\r\n       </span>\r\n       \r\n       \r\n   \r\n    );\r\n  \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  // console.log(state)\r\n   return {\r\n      value: state\r\n   }\r\n} \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n      change : (isToggleOn) => { dispatch(change(isToggleOn)) }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Container)\r\n\r\n","\r\nimport React, {useState, Fragment, useContext} from 'react'\r\n\r\n\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {Provider, connect} from 'react-redux'\r\n\r\n\r\n\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {MyContext} from './MyContext'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst initialState = {}\r\n\r\nconst CHANGE = 'CHANGE';\r\n\r\nconst change = () => {\r\n   return {\r\n      type: CHANGE\r\n   }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        \r\n\r\n\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(\r\n  applyMiddleware(),\r\n  // other store enhancers if any\r\n));\r\n\r\n\r\n\r\n\r\n\r\nfunction Trash() {\r\n\r\n\r\n  \r\n\r\n \r\n\r\n   const val = useContext(MyContext)\r\n\r\n   console.log(val)\r\n\r\n    return (\r\n      <div>\r\n        <span onClick={val}>Привет</span>\r\n\r\n      </div>\r\n    );\r\n  \r\n}\r\n  \r\n\r\n\r\nexport default Trash\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n\r\n// import React, {useState} from 'react'\r\n\r\n\r\n\r\n// import ReactDOM from 'react-dom';\r\n\r\n// import {Provider, connect} from 'react-redux'\r\n\r\n\r\n\r\n\r\n// import { createStore, applyMiddleware } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\n\r\n\r\n\r\n// const styles = {\r\n//    div: {\r\n//       border: '1px solid grey',\r\n//       minHeight: '500px',\r\n//       backGroundColor: 'red',\r\n//       margin: '10px'\r\n//    }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const initialState = \r\n\r\n// [\r\n//   {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\r\n//   {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\r\n//   {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\r\n//   {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\r\n//   {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\r\n//   {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\r\n// ];\r\n\r\n\r\n\r\n// const CHANGE = 'CHANGE';\r\n\r\n// const change = () => {\r\n//    return {\r\n//       type: CHANGE\r\n//    }\r\n// }\r\n\r\n// const reducer = (state = initialState, action) => {\r\n//     switch(action.type){\r\n        \r\n\r\n\r\n\r\n//         default: return state\r\n//     }\r\n// }\r\n\r\n\r\n// export const store = createStore(reducer, composeWithDevTools(\r\n//   applyMiddleware(),\r\n//   // other store enhancers if any\r\n// ));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function SearchBar(props){\r\n// // console.log(props.arr)\r\n\r\n \r\n\r\n\r\n\r\n//    return(\r\n//        <div style = {styles.div} >\r\n//          <input onChange = {OnchangeHandle}\r\n//           type=\"search\"   />  \r\n//          <hr/> \r\n//          <label htmlFor=\"\">\r\n//          <input type='checkbox'/>\r\n//          <span>Only show products in stock</span>\r\n//          </label>\r\n//          <ProductTable data ={props.arr} />\r\n//        </div>\r\n\r\n//     )\r\n// }\r\n\r\n\r\n\r\n// function ProductItem(props) {\r\n//   // console.log(props.el)\r\n     \r\n\r\n//       return (\r\n\r\n// <div className='row'>\r\n\r\n\r\n//  { props.el.category == 'Sporting Goods'\r\n\r\n//   ? <div className='col'> {props.el.name} {props.el.price}</div> \r\n//   : null} \r\n\r\n//     </div>\r\n\r\n \r\n\r\n//       )\r\n      \r\n// }\r\n\r\n\r\n\r\n\r\n// function ProductItemEl(props) {\r\n//   // console.log(props.el)\r\n     \r\n\r\n//       return (\r\n\r\n// <div className='row'>\r\n\r\n\r\n//  { props.el.category == 'Electronics'\r\n\r\n//   ? <div className='col'> {props.el.name} {props.el.price}</div> \r\n//   : null} \r\n\r\n//     </div>\r\n\r\n \r\n\r\n//       )\r\n      \r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function ProductTable(props) {\r\n// // console.log(props.data)\r\n\r\n//    return (\r\n    \r\n//       <div className='container' >\r\n//           <div className='row border'>\r\n//               <div className='col'>Name</div>\r\n//               <div className='col'>Price</div>\r\n\r\n//           </div>\r\n//             <div className='row border mt-3 '>\r\n//                   <h5>Sporting Goods</h5>\r\n//             </div>\r\n\r\n//             <div className='row border'>\r\n//                <div>\r\n//                 {props.data.map( (el, index) => { \r\n//                    return (\r\n//                       <div>\r\n                        \r\n//                         <ProductItem\r\n//                         el = {el} key = {index} /> \r\n                         \r\n//                       </div>\r\n\r\n//                    )  \r\n  \r\n//                 })}\r\n//                </div> \r\n//            </div>\r\n           \r\n\r\n//             <div className='row border'>\r\n//                <h5>Electronics</h5>\r\n//             </div>\r\n\r\n//              <div className='row border'>\r\n//                <div>\r\n//                 {props.data.map( (el, ind) => { \r\n\r\n//                    return (\r\n//                       <div>\r\n                        \r\n//                         <ProductItemEl\r\n//                         el = {el} key = {ind} /> \r\n                         \r\n//                       </div>\r\n\r\n//                    )  \r\n  \r\n//                 })}\r\n//                </div> \r\n//            </div>\r\n//       </div>\r\n    \r\n//    )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// function Trash(props) {\r\n\r\n//      const [val, setValue] = useState('')\r\n// var OnchangeHandle = (e) => {\r\n     \r\n//      console.log(e.target.value )\r\n// }\r\n   \r\n\r\n//      return (\r\n//       <div>\r\n\r\n//        <SearchBar arr = {props.cat}  />\r\n        \r\n\r\n       \r\n\r\n\r\n\r\n//        </div>\r\n//       );\r\n// }\r\n\r\n\r\n// const mapStateToProps = (state)=> {\r\n//    return {\r\n//       cat: state\r\n//    }\r\n\r\n// }\r\n\r\n\r\n\r\n// const mapDispatchToProps = (dispatch)=> {\r\n//    return {\r\n//       change: () => {dispatch(change())}\r\n//    }\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps) (Trash)","import React from 'react'\r\nimport {MyContext} from './MyContext'\r\n\r\nconst val = MyContext._currentValue\r\n\r\nfunction Post() {\r\nconsole.log(val)\r\n\r\n\t\r\n\treturn (\r\n          <MyContext.Consumer>\r\n          {() => <div>  {val}  </div>}\r\n         </MyContext.Consumer> \r\n  \r\n\t\t)\r\n} \r\nexport default Post","import React, {createContext, Fragment} from 'react'\nimport Container from './components/Container'\nimport Trash from './components/Trash'\n\nimport {MyContext} from './components/MyContext'\n// import MyConsumerTest from './components/MyConsumerTest'\nimport Post from './components/Post'\n\n  // <Container />\n     // <Trash />  \n\nconst items = [\n    {id: 1 , term : ' first', description: 'Описание 1'},\n    {id: 2 , term : ' second',  description: 'Описание 2'},\n    {id: 3 , term : ' third',  description: 'Описание 3'}\n]\n\n\n\n\n// console.log(MyContext)\n\nconst onClick = () => {\n    console.log ('sssfgdfgdgdgdgdfgdfdfgdgdfgdfgdgdfgdfggfg')\n}\n\n\n\n\n\n\n\n\n\nfunction Button(props) {\n  return <button onClick={props.onClick}>Say Hello</button>;\n}\n\nfunction HelloButton() {\n  function handleClick() {\n    alert('Hello!');\n  }\n  return <Button onClick={handleClick} />;\n}\n\n\n\n\n\n\n\nfunction App() {\n   // console.log()\n\n  return (\n       <MyContext.Provider value = {1000}>\n      <Fragment>\n     <mark><h1>fgfgfgf</h1>sfvdgfg</mark>\n          \n      <hr/>\n\n   \n      <Container />\n       \n       <hr/>\n        \n       <Trash />\n         \n      <hr/>\n       <Post/>\n       \n       <HelloButton/>\n\n\n      </Fragment>\n\n      </MyContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\n// import {store} from './components/Container'\nimport {store} from './components/Trash'\n\nReactDOM.render(\n  <React.StrictMode>\n\n  <Provider store = {store}>\n    <App />\n  </Provider> \n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}